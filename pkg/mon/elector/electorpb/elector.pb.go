// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: elector.proto

package electorpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"
import github_com_golang_protobuf_proto "github.com/golang/protobuf/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MessageType int32

const (
	MsgElect          MessageType = 0
	MsgRequestVote    MessageType = 1
	MsgRequestVoteAck MessageType = 2
	MsgVictory        MessageType = 3
)

var MessageType_name = map[int32]string{
	0: "MsgElect",
	1: "MsgRequestVote",
	2: "MsgRequestVoteAck",
	3: "MsgVictory",
}
var MessageType_value = map[string]int32{
	"MsgElect":          0,
	"MsgRequestVote":    1,
	"MsgRequestVoteAck": 2,
	"MsgVictory":        3,
}

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}
func (x MessageType) String() string {
	return proto.EnumName(MessageType_name, int32(x))
}
func (x *MessageType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MessageType_value, data, "MessageType")
	if err != nil {
		return err
	}
	*x = MessageType(value)
	return nil
}
func (MessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_elector_3ee5b840c0fc9585, []int{0}
}

type Message struct {
	Type                 MessageType `protobuf:"varint,1,req,name=type,enum=electorpb.MessageType" json:"type"`
	From                 int64       `protobuf:"varint,2,opt,name=from" json:"from"`
	To                   int64       `protobuf:"varint,3,opt,name=to" json:"to"`
	Epoch                int64       `protobuf:"varint,4,opt,name=epoch" json:"epoch"`
	Granted              bool        `protobuf:"varint,5,opt,name=granted" json:"granted"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_elector_3ee5b840c0fc9585, []int{0}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Message.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(dst, src)
}
func (m *Message) XXX_Size() int {
	return m.Size()
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Message)(nil), "electorpb.Message")
	proto.RegisterEnum("electorpb.MessageType", MessageType_name, MessageType_value)
}
func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintElector(dAtA, i, uint64(m.Type))
	dAtA[i] = 0x10
	i++
	i = encodeVarintElector(dAtA, i, uint64(m.From))
	dAtA[i] = 0x18
	i++
	i = encodeVarintElector(dAtA, i, uint64(m.To))
	dAtA[i] = 0x20
	i++
	i = encodeVarintElector(dAtA, i, uint64(m.Epoch))
	dAtA[i] = 0x28
	i++
	if m.Granted {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintElector(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Message) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovElector(uint64(m.Type))
	n += 1 + sovElector(uint64(m.From))
	n += 1 + sovElector(uint64(m.To))
	n += 1 + sovElector(uint64(m.Epoch))
	n += 2
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovElector(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozElector(x uint64) (n int) {
	return sovElector(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Message) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowElector
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowElector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (MessageType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowElector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			m.To = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowElector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.To |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowElector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Granted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowElector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Granted = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipElector(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthElector
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipElector(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowElector
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowElector
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowElector
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthElector
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowElector
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipElector(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthElector = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowElector   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("elector.proto", fileDescriptor_elector_3ee5b840c0fc9585) }

var fileDescriptor_elector_3ee5b840c0fc9585 = []byte{
	// 274 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x8f, 0xc1, 0x4e, 0x83, 0x40,
	0x10, 0x86, 0x59, 0x4a, 0xd3, 0x3a, 0x2a, 0xc1, 0x8d, 0x9a, 0x4d, 0x0f, 0x2b, 0xf1, 0x44, 0x4c,
	0xa4, 0xc6, 0x37, 0xb0, 0x89, 0x47, 0x2e, 0x8d, 0xe1, 0x5e, 0x70, 0xba, 0x6d, 0xb4, 0x0e, 0xb2,
	0xcb, 0x81, 0x37, 0xf1, 0x0d, 0x7c, 0x15, 0x8e, 0x7d, 0x02, 0x63, 0xf1, 0x45, 0x0c, 0x94, 0x1a,
	0xbc, 0xcd, 0xff, 0xfd, 0xff, 0x4c, 0xfe, 0x81, 0x53, 0x7c, 0xc5, 0xd4, 0x50, 0x1e, 0x66, 0x39,
	0x19, 0xe2, 0x47, 0x9d, 0xcc, 0x92, 0xc9, 0xad, 0x5a, 0x9b, 0x55, 0x91, 0x84, 0x29, 0x6d, 0xa6,
	0x8a, 0x14, 0x4d, 0xdb, 0x44, 0x52, 0x2c, 0x5b, 0xd5, 0x8a, 0x76, 0xda, 0x6f, 0x5e, 0x7f, 0x32,
	0x18, 0x45, 0xa8, 0xf5, 0x42, 0x21, 0xbf, 0x03, 0xc7, 0x94, 0x19, 0x0a, 0xe6, 0xdb, 0x81, 0x7b,
	0x7f, 0x19, 0xfe, 0x1d, 0x0d, 0xbb, 0xc4, 0x53, 0x99, 0xe1, 0xcc, 0xa9, 0xbe, 0xae, 0xac, 0x79,
	0x9b, 0xe4, 0x02, 0x9c, 0x65, 0x4e, 0x1b, 0x61, 0xfb, 0x2c, 0x18, 0x1c, 0x9c, 0x86, 0xf0, 0x73,
	0xb0, 0x0d, 0x89, 0x41, 0x8f, 0xdb, 0x86, 0xf8, 0x04, 0x86, 0x98, 0x51, 0xba, 0x12, 0x4e, 0xcf,
	0xd8, 0x23, 0x2e, 0x61, 0xa4, 0xf2, 0xc5, 0x9b, 0xc1, 0x67, 0x31, 0xf4, 0x59, 0x30, 0xee, 0xdc,
	0x03, 0xbc, 0x89, 0xe1, 0xb8, 0x57, 0x83, 0x9f, 0xc0, 0x38, 0xd2, 0xea, 0xb1, 0xa9, 0xe8, 0x59,
	0x9c, 0x83, 0x1b, 0x69, 0x35, 0xc7, 0xf7, 0x02, 0xb5, 0x89, 0xc9, 0xa0, 0xc7, 0xf8, 0x05, 0x9c,
	0xfd, 0x67, 0x0f, 0xe9, 0x8b, 0x67, 0x73, 0x17, 0x20, 0xd2, 0x2a, 0x5e, 0x37, 0xaf, 0x95, 0xde,
	0x60, 0x26, 0xaa, 0x9d, 0xb4, 0xb6, 0x3b, 0x69, 0x55, 0xb5, 0x64, 0xdb, 0x5a, 0xb2, 0xef, 0x5a,
	0xb2, 0x8f, 0x1f, 0x69, 0xfd, 0x06, 0x00, 0x00, 0xff, 0xff, 0xb7, 0x55, 0x5a, 0xa5, 0x65, 0x01,
	0x00, 0x00,
}
